package com.wkq.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AD_TIME_INFO".
*/
public class AdTimeInfoDao extends AbstractDao<AdTimeInfo, String> {

    public static final String TABLENAME = "AD_TIME_INFO";

    /**
     * Properties of entity AdTimeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AdTimeKey = new Property(0, String.class, "AdTimeKey", true, "AD_TIME_KEY");
        public final static Property AdTime = new Property(1, String.class, "AdTime", false, "AD_TIME");
        public final static Property AdClickCount = new Property(2, int.class, "AdClickCount", false, "AD_CLICK_COUNT");
    }


    public AdTimeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AdTimeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AD_TIME_INFO\" (" + //
                "\"AD_TIME_KEY\" TEXT PRIMARY KEY NOT NULL ," + // 0: AdTimeKey
                "\"AD_TIME\" TEXT NOT NULL ," + // 1: AdTime
                "\"AD_CLICK_COUNT\" INTEGER NOT NULL );"); // 2: AdClickCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AD_TIME_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdTimeInfo entity) {
        stmt.clearBindings();
 
        String AdTimeKey = entity.getAdTimeKey();
        if (AdTimeKey != null) {
            stmt.bindString(1, AdTimeKey);
        }
        stmt.bindString(2, entity.getAdTime());
        stmt.bindLong(3, entity.getAdClickCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdTimeInfo entity) {
        stmt.clearBindings();
 
        String AdTimeKey = entity.getAdTimeKey();
        if (AdTimeKey != null) {
            stmt.bindString(1, AdTimeKey);
        }
        stmt.bindString(2, entity.getAdTime());
        stmt.bindLong(3, entity.getAdClickCount());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AdTimeInfo readEntity(Cursor cursor, int offset) {
        AdTimeInfo entity = new AdTimeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // AdTimeKey
            cursor.getString(offset + 1), // AdTime
            cursor.getInt(offset + 2) // AdClickCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdTimeInfo entity, int offset) {
        entity.setAdTimeKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAdTime(cursor.getString(offset + 1));
        entity.setAdClickCount(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AdTimeInfo entity, long rowId) {
        return entity.getAdTimeKey();
    }
    
    @Override
    public String getKey(AdTimeInfo entity) {
        if(entity != null) {
            return entity.getAdTimeKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdTimeInfo entity) {
        return entity.getAdTimeKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
